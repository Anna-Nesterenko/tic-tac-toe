The *SVG* folder contains the icons you selected as separate SVG files.

If you prefer using PNGs, PDFs, or CSS sprites, refer to the Preferences panel of the IcoMoon app before downloading your zip pack.

*demo.html* lists the icons that you selected. To insert your icons as inline SVGs (with the <use> element), copy the <svg> element (that contains symbol definitions) from the source of the demo.html file, below your own HTML's <body> tag. After copying this SVG, you can reference your glyphs like the following:

<svg class="icon icon-twitter"><use xlink:href="#icon-twitter"></use></svg>

You can get this code from the SVG tab of the IcoMoon app, or by referring to the source of the demo.html file. To see how you can change the color/size of your icons using CSS, refer to the example provided in the *style.css* file.

If you prefer to reference an external SVG (containing <defs>) instead of embedding it in HTML, you will need to use *svgxuse.js* in order to support IE 9+. In browsers that don't support referencing external SVGs (such as IE 9), this polyfill sends one HTTP request to fetch and cache all symbol definitions. See *demo-external-svg.html* for this approach. This demo references the *symbol-defs.svg* file and uses the aforementioned polyfill. Note that it must be hosted on a web server to work
properly. Learn more about this polyfill here: https://github.com/Keyamoon/svgxuse

You can import *selection.json* back to the IcoMoon app using the *Import Icons* button (or via Main Menu → Manage Projects) to retrieve your icon selection.
// const payment = 2000;
// let balance = 10000;
// const message = `Общая стоимость заказа ${payment} кредитов. Проверяем количество доступных средств на счету`;

// console.log(5 < 15);

// console.log(Boolean());
// console.log(6 || 7 || 8);
// console.log(!5);
// const x1 = 10;
// const x2 = 30;
// const number = 50;

// console.log(number < x1 || number > x2);
// const isOnline = true;
// const isFriend = true;
// const isDnd = false;

// const canOpenChat = isOnline && isFriend && !isDnd;

// console.log('Можно открыть чат?', canOpenChat);

// const sub = 'pro';

// const canAccessContetn = sub === 'pro' || sub ==='Vip';
// console.log('Есть доступ к контенту', canAccessContetn);

// let elementWidth = '50px';
// elementWidth = Number.parseInt(elementWidth);
// console.log('elementWidth:', elementWidth);

// let elementHight = '200.74px';
// elementHight = Number.parseFloat(elementHight);
// console.log('elementHight:', elementHight);

// let salary = 1300.16472;
// salary = Number(salary.toFixed(2));

// console.log(salary);

// let quantity = '30';
// let value = 'Эту строку нельзя назвать';
// console.log(Number(quantity));
// console.log(Number(value));

// const base = 3;
// const power = 5;
// const result = Math.pow(base, power);
// console.log(2 ** 7);

// const blackListedWord1 = 'спам';
// const blackListedWord2 = 'распродажа';

// const string1 = 'Привет! Я принц Абдула, это не спам, предлагаю миллион';
// const string2 = 'Самая большая РАСПРОДАЖА этой недели. Не пропустите';
// const string3 = 'Рексламная компания #faslivesmaster';

// console.log(string1.includes(blackListedWord1));
// console.log(string1.includes(blackListedWord2));

// console.log(string2.toLowerCase().includes(blackListedWord2));
// console.log(string2.includes(blackListedWord1));

// console.log(string3.includes(blackListedWord1));
// console.log(string3.includes(blackListedWord2));
// const balance = -1000;
// let message;
// const message = balance > 0 ? 'позитивный балланс' : 'негативный балланс';
// if (balance > 0) {
//   message = 'позитивный балланс';
// } else {
//   message = 'негативный балланс';
// }
// console.log(message);

